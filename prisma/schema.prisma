generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id              String     @id @default(cuid())
  code            String     @unique
  name            String
  profileImage    String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  pageAccessToken String?
  verifyToken     String?
  Products        Products[]
  chatBot         chatBot[]

  @@unique([id, code])
}

model chatBot {
  id         String   @id @default(cuid())
  title      String
  question   String
  answer     String
  image      String?
  buttonLink String[] @default([])
  keyword    String[] @default([])
  branchId   String
  brand      Branch   @relation(fields: [branchId], references: [id])
}

model User {
  id                         String                       @id @default(cuid())
  username                   String
  password                   String
  image                      String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  timeLineInstallmentPayment timeLineInstallmentPayment[]
}

model Products {
  id                   String                @id @default(cuid())
  images               String[]
  deviceName           String
  deviceDetail         String
  indentifier          String
  price                Int
  deposit              Int
  numberOfInstallments String
  installmentAmount    Int
  icloud               String?
  passwordIcloud       String?
  lockscreen           String?
  idLoad               String?
  passwordIdLoad       String?
  status               productStatus         @default(ForSale)
  branchId             String
  createAt             DateTime              @default(now())
  branch               Branch                @relation(fields: [branchId], references: [id])
  installmentPayments  installmentPayments[]
}

model installmentPayments {
  id                         String                       @id @default(cuid())
  code                       String
  productsId                 String
  paidInstallments           Int
  remainingAmount            Int
  createdAt                  DateTime                     @default(now())
  customerName               String
  facebookLink               String
  tel                        String
  downPaymentChoice          choice
  paymentAgreementFile       String
  deviceImeiImageFile        String
  idCardImage                String
  houseRegistrationImage     String
  customerReceivingImage     String
  statusInstallmentPayment   statusInstallmentPayment     @default(inProgress)
  receiptImage               String[]
  over                       Int                          @default(0)
  icloudPhoneNumber          String
  recipientId                String
  screenId                   String
  timeCode                   String
  allIdReceiptImage          String[]
  dueDates                   dueDates[]
  product                    Products                     @relation(fields: [productsId], references: [id])
  timeLineInstallmentPayment timeLineInstallmentPayment[]
}

model dueDates {
  id                    String               @id @default(cuid())
  dueDate               DateTime
  paymentStatus         paymentStatus        @default(pending)
  updatedAt             DateTime?
  pricePaid             Int
  installmentPaymentsId String?
  installmentPayments   installmentPayments? @relation(fields: [installmentPaymentsId], references: [id])
}

model timeLineInstallmentPayment {
  id                    String              @id @default(cuid())
  title                 String
  message               String
  createdAt             DateTime            @default(now())
  userId                String?
  installmentPaymentsId String
  installmentPayments   installmentPayments @relation(fields: [installmentPaymentsId], references: [id])
  creatBy               User?               @relation(fields: [userId], references: [id])
}

model blog {
  id       String   @id @default(cuid())
  title    String
  detail   String
  typeBlog typeBlog
  image    String
}

enum paymentStatus {
  pending
  paid
  overdue
}

enum statusInstallmentPayment {
  inProgress
  Hold
  Cancel
  Success
}

enum choice {
  cashPayment
  bankTransferPayment
}

enum productStatus {
  ForSale
  SoldOut
}

enum typeBlog {
  news
  promotion
}
